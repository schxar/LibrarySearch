LibrarySearch 项目使用说明

1. 项目结构：
- 前端：基于Vite+React的TypeScript应用 (library-search-ts-vite)
- 后端：Java Spring Boot应用 (src/main/java)
- 辅助后端：Python Flask应用 (flask_*_backend)

2. 主要功能模块：
- 图书搜索服务 (SearchController)
- 聊天服务 (ChatController)
- 下载服务 (LibraryDownloadController)
- 搜索历史记录 (SearchHistoryService)

3. 运行方式：
- 前端：进入library-search-ts-vite目录执行`npm install && npm run dev`
- Java后端：使用`mvn spring-boot:run`启动
- Python后端：执行对应flask应用中的app.py

4. 数据存储：
- MySQL数据库配置见src/main/resources/sql/schema.sql
- 静态资源存储在static/目录下

5. 答辩PPT思路：
- 项目概述(1页): 项目背景、目标、技术栈
- 系统架构(2页): 前后端分离架构图、模块划分
- 核心功能(3页): 搜索/聊天/下载功能实现原理
- 技术亮点(2页): 多语言协同、性能优化点
- 成果展示(1页): 系统截图/演示视频
- 总结展望(1页): 项目价值与改进方向

6. 可能的问题与回答(QA):
Q1: 为什么选择Vite+React+TS作为前端技术栈？
A1: Vite提供极快的开发体验，React组件化开发适合复杂UI，TS增强代码健壮性

Q2: 如何处理高并发搜索请求？
A2: 使用Spring Boot的异步处理机制，配合Redis缓存热门搜索结果

Q3: 项目中遇到的最大挑战是什么？
A3: 多语言服务协同，通过定义统一API规范解决通信问题

Q4: 如何保证系统安全性？
A4: 采用JWT认证、SQL注入防护、HTTPS传输等多层安全措施

Q5: 未来可以增加哪些功能？
A5: 个性化推荐、多端同步、语音搜索等增强用户体验的功能